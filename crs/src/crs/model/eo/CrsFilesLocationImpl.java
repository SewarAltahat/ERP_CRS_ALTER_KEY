package crs.model.eo;

import com.sd.util.db.DBUtil;

import gen.common.GenLib;

import java.math.BigDecimal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import java.util.HashSet;

import java.util.List;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 03 16:18:37 GMT+03:00 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrsFilesLocationImpl
  extends AuditEntityImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  protected enum AttributesEnum
  {
    FilesLocationPk,
    MainLocationFk,
    DepartmentsFk,
    CreatedBy,
    CreationDate,
    ModifiedBy,
    ModifiedDate,
    UserDepartmentFk,
    DisplayFileLocationDesc,
    CrsFilesLocation,
    MainLocationFkCrsFilesLocation,
    CrsFilesLocationTl,
    CrsIncomingDocuments,
    CrsOutgoingDocuments,
    CrsOutgoingDocPreparation,
    HcmDepartments;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    protected int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    protected static final int firstIndex()
    {
      return firstIndex;
    }

    protected static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    protected static final AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  public static final int FILESLOCATIONPK = AttributesEnum.FilesLocationPk.index();
  public static final int MAINLOCATIONFK = AttributesEnum.MainLocationFk.index();
  public static final int DEPARTMENTSFK = AttributesEnum.DepartmentsFk.index();
  public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
  public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
  public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
  public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
  public static final int USERDEPARTMENTFK = AttributesEnum.UserDepartmentFk.index();
  public static final int DISPLAYFILELOCATIONDESC = AttributesEnum.DisplayFileLocationDesc.index();
  public static final int CRSFILESLOCATION = AttributesEnum.CrsFilesLocation.index();
  public static final int MAINLOCATIONFKCRSFILESLOCATION = AttributesEnum.MainLocationFkCrsFilesLocation.index();
  public static final int CRSFILESLOCATIONTL = AttributesEnum.CrsFilesLocationTl.index();
  public static final int CRSINCOMINGDOCUMENTS = AttributesEnum.CrsIncomingDocuments.index();
  public static final int CRSOUTGOINGDOCUMENTS = AttributesEnum.CrsOutgoingDocuments.index();
  public static final int CRSOUTGOINGDOCPREPARATION = AttributesEnum.CrsOutgoingDocPreparation.index();
  public static final int HCMDEPARTMENTS = AttributesEnum.HcmDepartments.index();

  /**
   * This is the default constructor (do not remove).
   */
  public CrsFilesLocationImpl()
  {
  }

  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    return EntityDefImpl.findDefObject("crs.model.eo.CrsFilesLocation");
  }


  /**
   * Gets the attribute value for FilesLocationPk, using the alias name FilesLocationPk.
   * @return the value of FilesLocationPk
   */
  public BigDecimal getFilesLocationPk()
  {
    return (BigDecimal) getAttributeInternal(FILESLOCATIONPK);
  }

  /**
   * Sets <code>value</code> as the attribute value for FilesLocationPk.
   * @param value value to set the FilesLocationPk
   */
  public void setFilesLocationPk(BigDecimal value)
  {
    setAttributeInternal(FILESLOCATIONPK, value);
  }

  /**
   * Gets the attribute value for MainLocationFk, using the alias name MainLocationFk.
   * @return the value of MainLocationFk
   */
  public BigDecimal getMainLocationFk()
  {
    return (BigDecimal) getAttributeInternal(MAINLOCATIONFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for MainLocationFk.
   * @param value value to set the MainLocationFk
   */
  public void setMainLocationFk(BigDecimal value)
  {
    setAttributeInternal(MAINLOCATIONFK, value);
  }

  /**
   * Gets the attribute value for DepartmentsFk, using the alias name DepartmentsFk.
   * @return the value of DepartmentsFk
   */
  public BigDecimal getDepartmentsFk()
  {
    return (BigDecimal) getAttributeInternal(DEPARTMENTSFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for DepartmentsFk.
   * @param value value to set the DepartmentsFk
   */
  public void setDepartmentsFk(BigDecimal value)
  {
    setAttributeInternal(DEPARTMENTSFK, value);
  }

  /**
   * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
   * @return the value of CreatedBy
   */
  public BigDecimal getCreatedBy()
  {
    return (BigDecimal) getAttributeInternal(CREATEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreatedBy.
   * @param value value to set the CreatedBy
   */
  public void setCreatedBy(BigDecimal value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * Gets the attribute value for CreationDate, using the alias name CreationDate.
   * @return the value of CreationDate
   */
  public Timestamp getCreationDate()
  {
    return (Timestamp) getAttributeInternal(CREATIONDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for CreationDate.
   * @param value value to set the CreationDate
   */
  public void setCreationDate(Timestamp value)
  {
    setAttributeInternal(CREATIONDATE, value);
  }

  /**
   * Gets the attribute value for ModifiedBy, using the alias name ModifiedBy.
   * @return the value of ModifiedBy
   */
  public BigDecimal getModifiedBy()
  {
    return (BigDecimal) getAttributeInternal(MODIFIEDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedBy.
   * @param value value to set the ModifiedBy
   */
  public void setModifiedBy(BigDecimal value)
  {
    setAttributeInternal(MODIFIEDBY, value);
  }

  /**
   * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
   * @return the value of ModifiedDate
   */
  public Timestamp getModifiedDate()
  {
    return (Timestamp) getAttributeInternal(MODIFIEDDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for ModifiedDate.
   * @param value value to set the ModifiedDate
   */
  public void setModifiedDate(Timestamp value)
  {
    setAttributeInternal(MODIFIEDDATE, value);
  }

  /**
   * Gets the attribute value for UserDepartmentFk, using the alias name UserDepartmentFk.
   * @return the value of UserDepartmentFk
   */
  public BigDecimal getUserDepartmentFk()
  {
    return (BigDecimal) getAttributeInternal(USERDEPARTMENTFK);
  }

  /**
   * Sets <code>value</code> as the attribute value for UserDepartmentFk.
   * @param value value to set the UserDepartmentFk
   */
  public void setUserDepartmentFk(BigDecimal value)
  {
    setAttributeInternal(USERDEPARTMENTFK, value);
  }

  /**
   * Gets the attribute value for DisplayFileLocationDesc, using the alias name DisplayFileLocationDesc.
   * @return the value of DisplayFileLocationDesc
   */
  public String getDisplayFileLocationDesc()
  {
    return (String) getAttributeInternal(DISPLAYFILELOCATIONDESC);
  }

  /**
   * Sets <code>value</code> as the attribute value for DisplayFileLocationDesc.
   * @param value value to set the DisplayFileLocationDesc
   */
  public void setDisplayFileLocationDesc(String value)
  {
    setAttributeInternal(DISPLAYFILELOCATIONDESC, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getCrsFilesLocation()
  {
    return (RowIterator) getAttributeInternal(CRSFILESLOCATION);
  }

  /**
   * @return the associated entity CrsFilesLocationImpl.
   */
  public CrsFilesLocationImpl getMainLocationFkCrsFilesLocation()
  {
    return (CrsFilesLocationImpl) getAttributeInternal(MAINLOCATIONFKCRSFILESLOCATION);
  }

  /**
   * Sets <code>value</code> as the associated entity CrsFilesLocationImpl.
   */
  public void setMainLocationFkCrsFilesLocation(CrsFilesLocationImpl value)
  {
    setAttributeInternal(MAINLOCATIONFKCRSFILESLOCATION, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getCrsFilesLocationTl()
  {
    return (RowIterator) getAttributeInternal(CRSFILESLOCATIONTL);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getCrsIncomingDocuments()
  {
    return (RowIterator) getAttributeInternal(CRSINCOMINGDOCUMENTS);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getCrsOutgoingDocuments()
  {
    return (RowIterator) getAttributeInternal(CRSOUTGOINGDOCUMENTS);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getCrsOutgoingDocPreparation()
  {
    return (RowIterator) getAttributeInternal(CRSOUTGOINGDOCPREPARATION);
  }

  /**
   * @return the associated entity HcmDepartmentsImpl.
   */
  public HcmDepartmentsImpl getHcmDepartments()
  {
    return (HcmDepartmentsImpl) getAttributeInternal(HCMDEPARTMENTS);
  }

  /**
   * Sets <code>value</code> as the associated entity HcmDepartmentsImpl.
   */
  public void setHcmDepartments(HcmDepartmentsImpl value)
  {
    setAttributeInternal(HCMDEPARTMENTS, value);
  }


  /**
   * @param filesLocationPk key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(BigDecimal filesLocationPk)
  {
    return new Key(new Object[] { filesLocationPk });
  }

  /**
   * Add locking logic here.
   */
  public void lock()
  {
    super.lock();
  }

  /**
   * Custom DML update/insert/delete logic here.
   * @param operation the operation type
   * @param e the transaction event
   */
     private void preventCircularReference(String returnFileLoactionQuery, Number enteredValue, String mainLocationNumber){
     PreparedStatement returnFileLoaction = null;
     ResultSet result = null;
     if (enteredValue != null){
       HashSet<Long> dataSet = new HashSet<Long>();
       if (getFilesLocationPk() != null) {// if primary key not null
         dataSet.add(getFilesLocationPk().longValue());
       }
       dataSet.add(enteredValue.longValue());
       returnFileLoaction = getDBTransaction().createPreparedStatement(returnFileLoactionQuery, 1);
       long enteredValueInLong = enteredValue.longValue();
       try {
         while (true) {
           returnFileLoaction.setLong(1, enteredValueInLong);
           result = returnFileLoaction.executeQuery();
           try {
             boolean hasNext = result.next();
             if (hasNext == false) {
               break;
             }else {
               enteredValueInLong = result.getLong(mainLocationNumber);
               boolean isAdded = dataSet.add(enteredValueInLong);
               if (isAdded == false){
                 throw new JboException(GenLib.getMessage("error.circularRef1") + " -- " + "getDeptNameAr()" + " -- " +
                                        GenLib.getMessage("error.circularRef2"));
               }
             }
           }catch (Exception sqle){
             if (sqle instanceof JboException) {
               throw sqle;
             }
           }finally{
             DBUtil.close(result);
           }
         }
       } catch (Exception sqle){
         if (sqle instanceof JboException){
           throw (JboException) sqle;
         }
         sqle.printStackTrace();
       } finally{
         DBUtil.close(result);
         DBUtil.close(returnFileLoaction);
       }
     }
   }
  protected void doDML(int operation, TransactionEvent e){
    if ((operation == DML_INSERT || operation == DML_UPDATE)&&getMainLocationFk() != null){
           String returnFileLoaction = "SELECT * FROM CRS_FILES_LOCATION WHERE FILES_LOCATION_PK = ? AND FILES_LOCATION_PK IS NOT NULL";
           preventCircularReference(returnFileLoaction, getMainLocationFk(), "MAIN_LOCATION_FK");
       }
    super.doDML(operation, e);
    if (operation == DML_INSERT){
       BigDecimal maxCrsFileLocationNumber = gen.common.GenLib.getPrimaryKeyValue(getDBTransaction(), "CRS_FILES_LOCATION_SEQ");
         setFilesLocationPk(maxCrsFileLocationNumber);
         insertIntoFileLocationTranslation();
       }
  }
  
  private void insertIntoFileLocationTranslation  () {
    oracle.jbo.server.EntityDefImpl crsFilesLocationDefinition= CrsFilesLocationTlImpl.getDefinitionObject();
    java.util.List<Integer> activeLanguages = gen.common.GenLib.getActiveDataLanguages(getDBTransaction());
      for (Integer languageId : activeLanguages) {
      CrsFilesLocationTlImpl crsFilesLocationTlImpl = (CrsFilesLocationTlImpl) crsFilesLocationDefinition.createInstance2(getDBTransaction(), null);
      crsFilesLocationTlImpl.setLanguagesFk(new BigDecimal(languageId));
      crsFilesLocationTlImpl.setFileLocationDesc(getDisplayFileLocationDesc());
      crsFilesLocationTlImpl.setFilesLocationFk(getFilesLocationPk());
    }  
  }
  
  public void remove()
   {
     gen.common.GenLib.removeTranlationRows(getCrsFilesLocationTl());
     super.remove();
   }

}

